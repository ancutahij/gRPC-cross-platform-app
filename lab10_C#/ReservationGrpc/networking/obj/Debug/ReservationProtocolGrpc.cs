// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: reservationProtocol.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Res.Protocol {
  public static partial class ReservationService
  {
    static readonly string __ServiceName = "res.protocol.ReservationService";

    static readonly grpc::Marshaller<global::Res.Protocol.ReservationRequest> __Marshaller_res_protocol_ReservationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Res.Protocol.ReservationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Res.Protocol.ReservationResponse> __Marshaller_res_protocol_ReservationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Res.Protocol.ReservationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Res.Protocol.Notification> __Marshaller_res_protocol_Notification = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Res.Protocol.Notification.Parser.ParseFrom);

    static readonly grpc::Method<global::Res.Protocol.ReservationRequest, global::Res.Protocol.ReservationResponse> __Method_login = new grpc::Method<global::Res.Protocol.ReservationRequest, global::Res.Protocol.ReservationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "login",
        __Marshaller_res_protocol_ReservationRequest,
        __Marshaller_res_protocol_ReservationResponse);

    static readonly grpc::Method<global::Res.Protocol.ReservationRequest, global::Res.Protocol.ReservationResponse> __Method_getJourneys = new grpc::Method<global::Res.Protocol.ReservationRequest, global::Res.Protocol.ReservationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getJourneys",
        __Marshaller_res_protocol_ReservationRequest,
        __Marshaller_res_protocol_ReservationResponse);

    static readonly grpc::Method<global::Res.Protocol.ReservationRequest, global::Res.Protocol.ReservationResponse> __Method_getFilteredJourneys = new grpc::Method<global::Res.Protocol.ReservationRequest, global::Res.Protocol.ReservationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getFilteredJourneys",
        __Marshaller_res_protocol_ReservationRequest,
        __Marshaller_res_protocol_ReservationResponse);

    static readonly grpc::Method<global::Res.Protocol.ReservationRequest, global::Res.Protocol.ReservationResponse> __Method_saveReservation = new grpc::Method<global::Res.Protocol.ReservationRequest, global::Res.Protocol.ReservationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "saveReservation",
        __Marshaller_res_protocol_ReservationRequest,
        __Marshaller_res_protocol_ReservationResponse);

    static readonly grpc::Method<global::Res.Protocol.ReservationRequest, global::Res.Protocol.ReservationResponse> __Method_logout = new grpc::Method<global::Res.Protocol.ReservationRequest, global::Res.Protocol.ReservationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "logout",
        __Marshaller_res_protocol_ReservationRequest,
        __Marshaller_res_protocol_ReservationResponse);

    static readonly grpc::Method<global::Res.Protocol.ReservationRequest, global::Res.Protocol.Notification> __Method_subscribe = new grpc::Method<global::Res.Protocol.ReservationRequest, global::Res.Protocol.Notification>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "subscribe",
        __Marshaller_res_protocol_ReservationRequest,
        __Marshaller_res_protocol_Notification);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Res.Protocol.ReservationProtocolReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ReservationService</summary>
    public abstract partial class ReservationServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Res.Protocol.ReservationResponse> login(global::Res.Protocol.ReservationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Res.Protocol.ReservationResponse> getJourneys(global::Res.Protocol.ReservationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Res.Protocol.ReservationResponse> getFilteredJourneys(global::Res.Protocol.ReservationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Res.Protocol.ReservationResponse> saveReservation(global::Res.Protocol.ReservationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Res.Protocol.ReservationResponse> logout(global::Res.Protocol.ReservationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task subscribe(global::Res.Protocol.ReservationRequest request, grpc::IServerStreamWriter<global::Res.Protocol.Notification> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ReservationService</summary>
    public partial class ReservationServiceClient : grpc::ClientBase<ReservationServiceClient>
    {
      /// <summary>Creates a new client for ReservationService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ReservationServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ReservationService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ReservationServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ReservationServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ReservationServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Res.Protocol.ReservationResponse login(global::Res.Protocol.ReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return login(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Res.Protocol.ReservationResponse login(global::Res.Protocol.ReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_login, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Res.Protocol.ReservationResponse> loginAsync(global::Res.Protocol.ReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return loginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Res.Protocol.ReservationResponse> loginAsync(global::Res.Protocol.ReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_login, null, options, request);
      }
      public virtual global::Res.Protocol.ReservationResponse getJourneys(global::Res.Protocol.ReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getJourneys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Res.Protocol.ReservationResponse getJourneys(global::Res.Protocol.ReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getJourneys, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Res.Protocol.ReservationResponse> getJourneysAsync(global::Res.Protocol.ReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getJourneysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Res.Protocol.ReservationResponse> getJourneysAsync(global::Res.Protocol.ReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getJourneys, null, options, request);
      }
      public virtual global::Res.Protocol.ReservationResponse getFilteredJourneys(global::Res.Protocol.ReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getFilteredJourneys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Res.Protocol.ReservationResponse getFilteredJourneys(global::Res.Protocol.ReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getFilteredJourneys, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Res.Protocol.ReservationResponse> getFilteredJourneysAsync(global::Res.Protocol.ReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getFilteredJourneysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Res.Protocol.ReservationResponse> getFilteredJourneysAsync(global::Res.Protocol.ReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getFilteredJourneys, null, options, request);
      }
      public virtual global::Res.Protocol.ReservationResponse saveReservation(global::Res.Protocol.ReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return saveReservation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Res.Protocol.ReservationResponse saveReservation(global::Res.Protocol.ReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_saveReservation, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Res.Protocol.ReservationResponse> saveReservationAsync(global::Res.Protocol.ReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return saveReservationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Res.Protocol.ReservationResponse> saveReservationAsync(global::Res.Protocol.ReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_saveReservation, null, options, request);
      }
      public virtual global::Res.Protocol.ReservationResponse logout(global::Res.Protocol.ReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return logout(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Res.Protocol.ReservationResponse logout(global::Res.Protocol.ReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_logout, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Res.Protocol.ReservationResponse> logoutAsync(global::Res.Protocol.ReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return logoutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Res.Protocol.ReservationResponse> logoutAsync(global::Res.Protocol.ReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_logout, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Res.Protocol.Notification> subscribe(global::Res.Protocol.ReservationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return subscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Res.Protocol.Notification> subscribe(global::Res.Protocol.ReservationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_subscribe, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ReservationServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ReservationServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ReservationServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_login, serviceImpl.login)
          .AddMethod(__Method_getJourneys, serviceImpl.getJourneys)
          .AddMethod(__Method_getFilteredJourneys, serviceImpl.getFilteredJourneys)
          .AddMethod(__Method_saveReservation, serviceImpl.saveReservation)
          .AddMethod(__Method_logout, serviceImpl.logout)
          .AddMethod(__Method_subscribe, serviceImpl.subscribe).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ReservationServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_login, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Res.Protocol.ReservationRequest, global::Res.Protocol.ReservationResponse>(serviceImpl.login));
      serviceBinder.AddMethod(__Method_getJourneys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Res.Protocol.ReservationRequest, global::Res.Protocol.ReservationResponse>(serviceImpl.getJourneys));
      serviceBinder.AddMethod(__Method_getFilteredJourneys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Res.Protocol.ReservationRequest, global::Res.Protocol.ReservationResponse>(serviceImpl.getFilteredJourneys));
      serviceBinder.AddMethod(__Method_saveReservation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Res.Protocol.ReservationRequest, global::Res.Protocol.ReservationResponse>(serviceImpl.saveReservation));
      serviceBinder.AddMethod(__Method_logout, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Res.Protocol.ReservationRequest, global::Res.Protocol.ReservationResponse>(serviceImpl.logout));
      serviceBinder.AddMethod(__Method_subscribe, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Res.Protocol.ReservationRequest, global::Res.Protocol.Notification>(serviceImpl.subscribe));
    }

  }
}
#endregion
